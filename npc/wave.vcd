$version Generated by VerilatedVcd $end
$timescale 1s $end
 $scope module TOP $end
  $var wire 1 ~ clk $end
  $var wire 1 !! reset $end
  $scope module top $end
   $var wire 1 ~ clk $end
   $var wire 1 !! reset $end
   $var wire 32 # ifu_pc [31:0] $end
   $var wire 32 $ inst [31:0] $end
   $var wire 4 % lsu_cnt [3:0] $end
   $var wire 1 & mem_cnt $end
   $var wire 4 ' alu_cnt [3:0] $end
   $var wire 6 ( ins_cnt [5:0] $end
   $var wire 3 ) csr_cnt [2:0] $end
   $var wire 4 * pc_cnt [3:0] $end
   $var wire 5 + raddr1 [4:0] $end
   $var wire 5 , raddr2 [4:0] $end
   $var wire 5 - waddr [4:0] $end
   $var wire 32 . rdata1 [31:0] $end
   $var wire 32 / rdata2 [31:0] $end
   $var wire 32 0 wdata [31:0] $end
   $var wire 32 1 addr_load [31:0] $end
   $var wire 32 1 addr_store [31:0] $end
   $var wire 32 2 data_load [31:0] $end
   $var wire 32 / data_store [31:0] $end
   $var wire 32 3 imm [31:0] $end
   $var wire 12 4 csr_imm [11:0] $end
   $var wire 32 5 csr_data [31:0] $end
   $var wire 1 6 br_taken $end
   $var wire 1 7 auipc $end
   $var wire 1 8 lui $end
   $var wire 1 9 ebreak $end
   $var wire 1 : load $end
   $var wire 1 ; jalr $end
   $var wire 1 < jal $end
   $scope module csr_t0 $end
    $var wire 1 ~ clk $end
    $var wire 1 !! reset $end
    $var wire 32 # pc_in [31:0] $end
    $var wire 3 ) csr_cnt [2:0] $end
    $var wire 12 4 csr_imm [11:0] $end
    $var wire 32 . wdata [31:0] $end
    $var wire 32 5 rdata [31:0] $end
    $var wire 32 = mtvec [31:0] $end
    $var wire 32 > mepc [31:0] $end
    $var wire 32 ? mstatus [31:0] $end
    $var wire 32 @ mcause [31:0] $end
    $var wire 32 A mcycle [31:0] $end
    $var wire 32 B mcycleh [31:0] $end
    $var wire 32 C mvendorid [31:0] $end
    $var wire 32 D marchid [31:0] $end
    $var wire 32 E temp [31:0] $end
   $upscope $end
   $scope module exu_t0 $end
    $var wire 32 # pc_in [31:0] $end
    $var wire 4 * pc_cnt [3:0] $end
    $var wire 4 ' alu_cnt [3:0] $end
    $var wire 3 ) csr_cnt [2:0] $end
    $var wire 1 7 auipc $end
    $var wire 1 8 lui $end
    $var wire 1 ; jalr $end
    $var wire 1 : load $end
    $var wire 1 < jal $end
    $var wire 32 3 imm [31:0] $end
    $var wire 32 5 csr_data [31:0] $end
    $var wire 32 0 alu_result [31:0] $end
    $var wire 1 6 br_taken $end
    $var wire 32 . rdata1 [31:0] $end
    $var wire 32 / rdata2 [31:0] $end
    $var wire 32 2 data_load [31:0] $end
    $var wire 6 ( ins_cnt [5:0] $end
    $var wire 1 F UType $end
    $var wire 1 < JType $end
    $var wire 1 G BType $end
    $var wire 1 H IType $end
    $var wire 1 I SType $end
    $var wire 1 J RType $end
    $var wire 32 K alu_a [31:0] $end
    $var wire 32 L alu_b [31:0] $end
    $var wire 64 M shift_temp [63:0] $end
   $upscope $end
   $scope module gpr_t0 $end
    $var wire 1 ~ clk $end
    $var wire 1 !! reset $end
    $var wire 32 # pc_in [31:0] $end
    $var wire 5 + raddr1 [4:0] $end
    $var wire 5 , raddr2 [4:0] $end
    $var wire 32 . rdata1 [31:0] $end
    $var wire 32 / rdata2 [31:0] $end
    $var wire 5 - waddr [4:0] $end
    $var wire 32 0 wdata [31:0] $end
    $var wire 1 9 ebreak $end
    $var wire 1 & mem_cnt $end
    $var wire 32 O rf[0] [31:0] $end
    $var wire 32 P rf[1] [31:0] $end
    $var wire 32 Q rf[2] [31:0] $end
    $var wire 32 R rf[3] [31:0] $end
    $var wire 32 S rf[4] [31:0] $end
    $var wire 32 T rf[5] [31:0] $end
    $var wire 32 U rf[6] [31:0] $end
    $var wire 32 V rf[7] [31:0] $end
    $var wire 32 W rf[8] [31:0] $end
    $var wire 32 X rf[9] [31:0] $end
    $var wire 32 Y rf[10] [31:0] $end
    $var wire 32 Z rf[11] [31:0] $end
    $var wire 32 [ rf[12] [31:0] $end
    $var wire 32 \ rf[13] [31:0] $end
    $var wire 32 ] rf[14] [31:0] $end
    $var wire 32 ^ rf[15] [31:0] $end
    $var wire 32 _ rf[16] [31:0] $end
    $var wire 32 ` rf[17] [31:0] $end
    $var wire 32 a rf[18] [31:0] $end
    $var wire 32 b rf[19] [31:0] $end
    $var wire 32 c rf[20] [31:0] $end
    $var wire 32 d rf[21] [31:0] $end
    $var wire 32 e rf[22] [31:0] $end
    $var wire 32 f rf[23] [31:0] $end
    $var wire 32 g rf[24] [31:0] $end
    $var wire 32 h rf[25] [31:0] $end
    $var wire 32 i rf[26] [31:0] $end
    $var wire 32 j rf[27] [31:0] $end
    $var wire 32 k rf[28] [31:0] $end
    $var wire 32 l rf[29] [31:0] $end
    $var wire 32 m rf[30] [31:0] $end
    $var wire 32 n rf[31] [31:0] $end
    $var wire 1 & wen $end
    $scope module unnamedblk1 $end
     $var wire 32 o i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module idu_t0 $end
    $var wire 32 $ inst [31:0] $end
    $var wire 4 * pc_cnt [3:0] $end
    $var wire 4 % lsu_cnt [3:0] $end
    $var wire 1 & mem_cnt $end
    $var wire 4 ' alu_cnt [3:0] $end
    $var wire 6 ( ins_cnt [5:0] $end
    $var wire 3 ) csr_cnt [2:0] $end
    $var wire 5 + rs1 [4:0] $end
    $var wire 5 , rs2 [4:0] $end
    $var wire 5 - rd [4:0] $end
    $var wire 32 3 imm [31:0] $end
    $var wire 12 4 csr_imm [11:0] $end
    $var wire 1 7 auipc $end
    $var wire 1 8 lui $end
    $var wire 1 9 ebreak $end
    $var wire 1 : load $end
    $var wire 1 < jal $end
    $var wire 1 ; jalr $end
    $var wire 7 p opcode [6:0] $end
    $var wire 3 q fun3 [2:0] $end
    $var wire 7 r fun7 [6:0] $end
    $var wire 1 F UType $end
    $var wire 1 < JType $end
    $var wire 1 G BType $end
    $var wire 1 H IType $end
    $var wire 1 I SType $end
    $var wire 1 J RType $end
    $var wire 1 s IcsrType $end
    $var wire 1 t I_imm $end
    $var wire 1 u ecall $end
    $var wire 1 v mret $end
   $upscope $end
   $scope module ifu_t0 $end
    $var wire 1 ~ clk $end
    $var wire 1 !! reset $end
    $var wire 32 3 imm [31:0] $end
    $var wire 1 6 br_taken $end
    $var wire 32 $ inst [31:0] $end
    $var wire 32 # pc_out [31:0] $end
    $var wire 32 . ret [31:0] $end
    $var wire 32 5 csr_data [31:0] $end
    $var wire 4 * pc_cnt [3:0] $end
    $var wire 1 w jalr $end
    $var wire 1 x jal $end
    $var wire 1 y ecall $end
    $var wire 1 z mret $end
    $var wire 1 { bxx $end
    $var wire 32 | target_pc [31:0] $end
   $upscope $end
   $scope module lsu_t0 $end
    $var wire 4 % lsu_cnt [3:0] $end
    $var wire 32 2 data_load [31:0] $end
    $var wire 32 / data_store [31:0] $end
    $var wire 32 1 addr_load [31:0] $end
    $var wire 32 1 addr_store [31:0] $end
    $var wire 32 } temp [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


